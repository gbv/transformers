#!/bin/bash
#
# Bash functions to run test and print result in Test Anything Protocol (TAP)
#

function error {
    echo $1 1>&2
    exit 1
}

function start_testing {
    TEST_COUNTER=0
}

function done_testing {
    echo 1..$TEST_COUNTER
}

function ok {
    TEST_COUNTER=$(($TEST_COUNTER+1))
    echo ok $TEST_COUNTER - $1
}

function not_ok {
    TEST_COUNTER=$(($TEST_COUNTER+1))
    echo not ok $TEST_COUNTER - $1
}

function diag {
    awk '{print "#",$0}'
}

function xslt_tests {
    if [ ! `which saxon-xslt` ]; then
        error "missing saxon-xslt"
    fi

    XSLTSCRIPT=$1
    shift

    if [ ! -f $XSLTSCRIPT ]; then
        error "missing XSLT script $XSLTSCRIPT"
    fi

    if [ ! -f "../xslVersion.xsl" ]; then
        error "missing XSLT script xslVersion.xsl"
    fi

    XSLTVERSION=$(saxon-xslt "$XSLTSCRIPT" ../xslVersion.xsl)
    if [ "$XSLTVERSION" = "1.0" ]; then
        SAXON=saxon-xslt
    elif [ "$XSLTVERSION" = "2.0" ]; then
        SAXON=saxonb-xslt
    else
        ok "skipping $XSLTSCRIPT - cannot process XSLT version $XSLTVERSION"
        return
    fi

    for INFILE in $@
    do
        if [ ! -f $INFILE ]; then
            error "missing input file $INFILE"
        fi
        TESTDIR=`dirname $INFILE`
        OUTFILE=$TESTDIR/`basename $INFILE .in.xml`.out.xml
        OKFILE=$TESTDIR/`basename $INFILE .in.xml`.ok.xml
        
        rm -f $OUTFILE
        $SAXON -o $OUTFILE $INFILE $XSLTSCRIPT
        echo >> $OUTFILE # add newline at end of file

        if [ -f $OKFILE ]
        then
            # ignore blank lines and whitespace on diff
            if diff -Bb $OUTFILE $OKFILE > /dev/null
            then
                ok "$INFILE => $OUTFILE"
            else
                not_ok "$OUTFILE != $OKFILE"
                diff -Bn $OUTFILE $OKFILE | diag
            fi
        else
            not_ok "missing file $OKFILE"
        fi
    done
}

start_testing

XSLTSCRIPT=$(basename `pwd`).xsl

if [ "$#" -eq 0 ]
then
    if [ "$(ls test/*.in.xml)" != "" ]
    then 
        xslt_tests $XSLTSCRIPT test/*.in.xml
    else
        ok "skipped because of missing test cases test/*.in.xml"
    fi
else
    for file in "$@"
    do
        if [ -f "$file" ]
        then
            xslt_tests $XSLTSCRIPT "$file"
        elif [ -f "$file.in.xml" ]
        then
            xslt_tests $XSLTSCRIPT "$file.in.xml"
        elif [ -f "test/$file.in.xml" ]
        then
            xslt_tests $XSLTSCRIPT "test/$file.in.xml"
        else
            not_ok "test file not found: $file"
        fi
    done
fi

done_testing
